#include<stdio.h>
#include<string.h>
#include<stdlib.h> 
int isOperator(char ch)//take 'ch'
{
	char op_list[]="+-*=;%()[]{}";
	for(int i=0; i<strlen(op_list); i++)//for every operator
	{
		if(op_list[i]==ch)//compare 'ch'
		{
			printf("\nYes op -----: '%c'", ch);//found 'ch'
			return 1;	
		}
	}
	return 0;
}
int isKeyword(char * s)//'s' a pointer
{
	char keyword_list[][10]={"int", "if", "while", "else", "for"};//list of keywords
	for(int i=0; i<sizeof(keyword_list)/sizeof(keyword_list[0]); i++)
	{
		if(!strcmp(s,keyword_list[i]))
		{
			printf("\nYes keyword ---------: '%s'", s);
			return 1;	
		}
	}
	return 0;
}
int isInteger(char * s)
{
	char * cpy_s = s;
	while(*s!='\0')
	{
		int d=*s;
//		printf("\n%s id-->%d %c", cpy_s, d, *s);
		if( ! (d>=48 and d<=57)  )
			return 0;
		s++;
	}
	
	printf("\nYes integer ---------: '%s'", cpy_s);
	return 1;
	
//	printf("No keyword : '%s'", s);
	return 0;
}
int isFloat(char * s)
{
	char * cpy_s = s;
	int count_dot=0;
	while(*s!='\0')
	{
		int d=*s;
		if( ! (d>=48 and d<=57)  )
			return 0;
		if(*s=='.') 
			count_dot++;
		s++;
	}
	if(count_dot!=1) return 0;
	printf("\nYes float ---------: '%s'", cpy_s);
	return 1;
	
//	printf("No keyword : '%s'", s);
	return 0;
}
int isIdentifier(char * s)
{
	char * cpy_s = s;
	int index=0;
	while(*s!='\0')
	{
		int d=*s;
//		printf("\n%s id-->%d %c", cpy_s, d, *s);
		if(index==0)
		{
			if( !( (d>=65 and d<=90) or (d>=97 and d<=122) ) )
				return 0;
			index=1;
		}
		else
		{
			if( !( (d>=65 and d<=90) or (d>=97 and d<=122) or (d>=48 and d<=57) or d==95 ) )
				return 0;
		}
		s++;
	}
	printf("\nYes Identifier ---------: '%s'", cpy_s);
	return 1;
}

void parser(char tokens[20][20], int N)
{
	printf("\n------tokens-----------\n");
	for(int i=0; i<N; i++)
	{
		printf("%s ", tokens[i]);
	}	
	printf("\n------is report-----------\n");
	for(int i=0; i<N; i++)//isOperator
	{
		int status=0;
		if(strlen(tokens[i])==1)
		{
			isOperator(*tokens[i]);
			continue;
		}
		status=isKeyword(tokens[i]);
		isInteger(tokens[i]);
		isFloat(tokens[i]);
		if(status==0)	isIdentifier(tokens[i]);
	}
}

int main()
{
	//input program
	char program[]="  if for int a = 265 + 512 + 3.0 56.456 34. .67 ;   app cap tab    sap  3svs a_dd vish78";
	//create array of char for storing tokens
	char tokens[20][20]; int token_index=0;
	//initialise pm_index to start ie 0
	int pm_index=0;
	
	while(pm_index<strlen(program))//till end of program
	{
		if(program[pm_index]!=' ')//if char not a white space
		{
			int word_begin=pm_index; //set starting index of word //printf("\n start --> %d ", s_p);
			while(program[pm_index]!=' ' and pm_index<strlen(program))//while its not a white space
			{
//				printf("%c", program[pm_index]);
				pm_index++;//keep moving to next non-white space
			}
			int word_end=pm_index; //end of word //printf(" end --> %d ", s_p-1);
			
			char temp[20]="";//temporary word
			strncpy(temp, program+word_begin, word_end-word_begin);//copy the word in temp
			printf(">>> %s <<<",  temp) ;
			strcpy(tokens[token_index++],temp);//add word to tokens list
		 
			printf("\n");
		}
		else pm_index++;
	}
	parser(tokens, token_index);
//	printf("\n------tokens------------\n");
//	for(int i=0; i<token_index; i++)
//	{
//		printf("%s ", tokens[i]);
//	}
	
	return 0;
}
